{"version":3,"file":"js/485.1650900439818.2ba378b12e18287be6c4.js","mappings":"8PAmBA,MA2BA,EA3B0DA,IAEtD,MAAMC,EAAS,aAAc,KAAM,IAAAC,sBAAqB,EAAAC,YAAa,CACjEC,qBAAsB,CAAE,EAAAC,sCACxB,IAEEC,EAAQ,aAAc,MACxB,SACIN,EAAMO,QACC,OAAYP,EAAMO,QAAQD,OAE1B,SAAcA,QAG1B,CAAEN,EAAMO,SAEX,OACI,kBAAC,EAAAC,SAAQ,CAACF,MAAQA,GACd,kBAAC,gBAAM,CAACG,UAAW,IAAAC,aAAYC,OAAOC,SAASC,WAC3C,kBAAC,EAAAC,sBAAqB,CAACb,OAASA,GAC5B,kBAAC,IAAG","sources":["webpack:///./src/AppEntry.tsx"],"sourcesContent":["import {\n    createFetchingClient,\n    getBaseName,\n    getInsights\n} from '@redhat-cloud-services/insights-common-typescript';\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport React from 'react';\nimport { ClientContextProvider } from 'react-fetching-library';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as Redux from 'redux';\n\nimport App from './app/App';\nimport { createStore, resetStore } from './store/Store';\n\ninterface AppEntryProps {\n    logger?: Redux.Middleware;\n}\n\nconst AppEntry: React.FunctionComponent<AppEntryProps> = (props) => {\n\n    const client = React.useMemo(() => createFetchingClient(getInsights, {\n        responseInterceptors: [ validateSchemaResponseInterceptor ]\n    }), []);\n\n    const store = React.useMemo(() => {\n        resetStore();\n        if (props.logger) {\n            return createStore(props.logger).store;\n        } else {\n            return createStore().store;\n        }\n\n    }, [ props.logger ]);\n\n    return (\n        <Provider store={ store }>\n            <Router basename={ getBaseName(window.location.pathname) }>\n                <ClientContextProvider client={ client }>\n                    <App />\n                </ClientContextProvider>\n            </Router>\n        </Provider>\n    );\n};\n\nexport default AppEntry;\n"],"names":["props","client","createFetchingClient","getInsights","responseInterceptors","validateSchemaResponseInterceptor","store","logger","Provider","basename","getBaseName","window","location","pathname","ClientContextProvider"],"sourceRoot":""}